#include "DevPINTest.h"
#include "ui_DevPINTest.h"

CDevPINTest::CDevPINTest(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::CDevPINTest)
{

    ui->setupUi(this);
}

CDevPINTest::~CDevPINTest()
{
    delete ui;
}

void CDevPINTest::on_bt_Open_clicked()
{
    QByteArray vtData(64, 0x00);
    int nSize = vtData.size();
    int nLen = vtData.length();
    strcpy(vtData.data(), "33");
    QByteArray vtTmp1 = vtData;
    QByteArray vtTmp2 = vtData.data();
    QByteArray vtTmp3 = vtData.trimmed();
    vtData = vtData.data();
    nSize = vtData.size();
    nLen = vtData.length();

    if (m_pDev == nullptr)
    {
        m_pDev.Load("DevPIN_ZT598.dll", "CreateIDevPIN", "PIN");
    }
    if (m_pDev == nullptr)
        return;

    m_pDev->Open("COM:/dev/serial/by-id/RS232-HS:115200,N,8,1");
}

void CDevPINTest::on_bt_Close_clicked()
{
    if (m_pDev == nullptr)
        return;
    m_pDev->Close();
}

void CDevPINTest::on_bt_InitEpp_clicked()
{
    if (m_pDev == nullptr)
        return;
    m_pDev->InitEpp();
}

void CDevPINTest::on_bt_Reset_clicked()
{
    if (m_pDev == nullptr)
        return;
    m_pDev->Reset();
}

void CDevPINTest::on_bt_SetKeyVal_clicked()
{
    if (m_pDev == nullptr)
        return;
    m_pDev->SetKeyValue("3132331B343536083738390D2E3022204142434445464748");
}

void CDevPINTest::on_bt_GetFWVer_clicked()
{
    if (m_pDev == nullptr)
        return;
    char szFWVer[64] = {0};
    m_pDev->GetFirmware(szFWVer);
}

void CDevPINTest::on_bt_GetStatus_clicked()
{
    if (m_pDev == nullptr)
        return;

    DEVPINSTATUS stStatus;
    m_pDev->GetStatus(stStatus);
}

void CDevPINTest::on_bt_TextInput_clicked()
{
    if (m_pDev == nullptr)
        return;
    m_pDev->TextInput();
}

void CDevPINTest::on_bt_GetKeyPress_clicked()
{
    if (m_pDev == nullptr)
        return;

    EPP_KEYVAL stKey;
    m_pDev->ReadKeyPress(stKey);
}

void CDevPINTest::on_bt_CancelInput_clicked()
{
    if (m_pDev == nullptr)
        return;
    m_pDev->CancelInput();
}

void CDevPINTest::on_bt_PinInput_clicked()
{
    if (m_pDev == nullptr)
        return;
    m_pDev->PinInput();
}

void CDevPINTest::on_bt_GetPinBlock_clicked()
{
    if (m_pDev == nullptr)
        return;

    char szPinBlock[64] = { 0 };
    m_pDev->GetPinBlock(0x30, PIN_ISO9564_0, "123456789012", 0xFF, szPinBlock);
}

void CDevPINTest::on_bt_ImportKey_clicked()
{
    if (m_pDev == nullptr)
        return;

    char szKCV[64] = {0};
    m_pDev->ImportMKey(0x11, 0, "61283459071234556789012394567890", szKCV);
    m_pDev->ImportWKey(0x30, 0x11, PKU_FUNCTION, "61283459071234556789012394567890", szKCV);
    m_pDev->ImportWKey(0x33, 0x11, PKU_CRYPT, "61283459071234556789012394567890", szKCV);
    m_pDev->ImportWKey(0x35, 0x11, PKU_MACING, "61283459071234556789012394567890", szKCV);


}

void CDevPINTest::on_bt_DataCrypt_clicked()
{
    if (m_pDev == nullptr)
        return;


    QByteArray vtData
    QByteArray vtData
    QByteArray vtData = vtData1 + vtData2;
    char szResult[512] = { 0 };
    //m_pDev->DataCrypt(0x33, 0x31, "12345678123456781234567812345678", 0x0F, "0000000000000000", szResult);
    //m_pDev->DataCrypt(0x33, 0x32, "12345678123456781234567812345678", 0x0F, "0000000000000000", szResult);
    //  m_pDev->DataCrypt(0x33, ECB_EN, "12345678123456781234567812345678", 0x0F, "5555555555555555", szResult);
    m_pDev->DataCrypt(0x33, CBC_EN, "12345678123456781234567812345678", 0x0F, "5555555555555555", szResult);
    m_pDev->DataCrypt(0x33, CBC_DE, "12345678123456781234567812345678", 0x0F, "0000000000000000", szResult);

    m_pDev->DataMAC(0x35, MAC_PBOC, "12345678123456781234567812345678", "0000000000000000", szResult);
    m_pDev->DataMAC(0x35, MAC_ANSIX919, "12345678123456781234567812345678", "0000000000000000", szResult);
    //  m_pDev->DataMAC(0x35, MAC_ANSIX99, "12345678123456781234567812345678", "5555555555555555", szResult);
    m_pDev->DataMAC(0x35, MAC_ANSIX919, "12345678123456781234567812345678", "5555555555555555", szResult);
    m_pDev->DataMAC(0x35, MAC_CBC, "12345678123456781234567812345678", "5555555555555555", szResult);
    m_pDev->DataMAC(0x35, MAC_CBC, vtData, "0000000000000000", szResult);
}

void CDevPINTest::on_bt_SM4ImportKey_clicked()
{
    if (m_pDev == nullptr)
        return;

    char szKCV[64] = {0};
    m_pDev->SM4ImportMKey(0x15, "61283459071234556789012394567890", szKCV);
    m_pDev->SM4ImportWKey(0x50, 0x15, PKU_FUNCTION, "61283459071234556789012394567890", szKCV);
    m_pDev->SM4ImportWKey(0x51, 0x15, PKU_MACING, "61283459071234556789012394567891", szKCV);
    m_pDev->SM4ImportWKey(0x52, 0x15, PKU_CRYPT, "61283459071234556789012394567892", szKCV);
}

void CDevPINTest::on_bt_SM4DataCrypt_clicked()
{
    if (m_pDev == nullptr)
        return;

    char szResult[512] = { 0 };
    m_pDev->SM4CryptData(0x52, ECB_EN, "12345678123456781234567812345678", 0x0F, "55555555555555555555555555555555", szResult);
    m_pDev->SM4CryptData(0x52, ECB_DE, "12345678123456781234567812345678", 0x0F, "00000000000000000000000000000000", szResult);
    m_pDev->SM4CryptData(0x52, CBC_EN, "12345678123456781234567812345678", 0x0F, "55555555555555555555555555555555", szResult);
    m_pDev->SM4CryptData(0x52, CBC_DE, "12345678123456781234567812345678", 0x0F, "55555555555555555555555555555555", szResult);
    m_pDev->SM4CryptData(0x52, CBC_DE, "12345678123456781234567812345678", 0x0F, "00000000000000000000000000000000", szResult);
}

void CDevPINTest::on_bt_SM4MacData_clicked()
{
    if (m_pDev == nullptr)
        return;

    char szResult[512] = { 0 };
    m_pDev->SM4MACData(0x51, MAC_PBOC, "12345678123456781234567812345678", "55555555555555555555555555555555", szResult);
    m_pDev->SM4MACData(0x51, MAC_BANKSYS, "12345678123456781234567812345678",  "00000000000000000000000000000000", szResult);
}

void CDevPINTest::on_bt_SM4GetPinBlock_clicked()
{
    if (m_pDev == nullptr)
        return;

    char szPinBlock[64] = { 0 };
    m_pDev->SM4PinBlock(0x50, PIN_SM4, "123456789012", 0xFF, szPinBlock);
}
